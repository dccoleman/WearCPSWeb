{
    "collab_server" : "",
    "contents" : "---\ntitle: \"WearCPS: Safety vs. Security Analysis\"\noutput: github_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nload(\"Data.Rdata\")\n\nlibrary(ggplot2)\n```\n\n## Introduction\n\nBelow is the initial analyis/breakdown of the test data collected through our website **WearCPS.me**.\n\n## Average Ages\n\nAverage ages of participants:\n\n```{r analysis, incude=TRUE}\n\nsummary(Ages$age)\n\nggplot(Ages, aes(x=age)) +  geom_dotplot(binwidth = .3) +\n  scale_y_continuous(name = \"\", breaks = NULL) + ggtitle(\"Average Ages\") +\n  labs(x=\"Ages\",y=\"Ages\") \n```\n\n## Avg. Score\n\nBasic plot of Avg. Score:\n\n```{r analysis2, incude=TRUE}\n\nsummary(SexVsScore)\n\nggplot(SexVsScore, aes(x=finalScore)) +  geom_density(kernel = \"gaussian\", fill='orange', alpha=0.25) + ggtitle(\"Avg. Score\") + labs(x=\"Score\", y =\"Density\") +\n  scale_y_continuous(name = \"\", breaks = NULL)\n```\n\n## Avg. Response Time\n\nBasic plot of Avg. Response Times:\n\n```{r analysis3, incude=TRUE}\n\nsummary(NotificationResponseTimes)\n\nx <- data.frame(Average=NotificationResponseTimes$avg,Security=NotificationResponseTimes$secAvg,Safety=NotificationResponseTimes$safAvg)\nlibrary(ggplot2);library(reshape2)\ndata<- melt(x)\nggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + ggtitle(\"Response Times\") + labs(x=\"Time(ms)\", y =\"Density\") +\n  scale_y_continuous(name = \"\", breaks = NULL)\n```\n\n## Notification Correctness\n\nBasic plot of Notification Correctness:\n\n```{r analysis4, incude=TRUE}\n\nsummary(NotificationResponseCorrectness)\n\nx <- data.frame(Average=NotificationResponseCorrectness$avgCorrect,Security=NotificationResponseCorrectness$secAvgCorrect,Safety=NotificationResponseCorrectness$safAvgCorrect)\nlibrary(ggplot2);library(reshape2)\ndata<- melt(x)\nggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + ggtitle(\"Notification Correctness\") + labs(x=\"Percent Correct\", y =\"Density\") +\n  scale_y_continuous(name = \"\", breaks = NULL)\n\n```\n\n## Recall Correctness\n\nBasic plot of Recall Correctness:\n\n```{r analysis5, incude=TRUE}\n\nsummary(RecallCorrectPercentages)\n\nx <- data.frame(Average=RecallCorrectPercentages$avgPercent,Security=RecallCorrectPercentages$secPercent,Safety=RecallCorrectPercentages$safPercent)\nlibrary(ggplot2);library(reshape2)\ndata<- melt(x)\nggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + ggtitle(\"Recall Correctness\") + labs(x=\"Percent Correct\", y =\"Density\") +\n  scale_y_continuous(name = \"\", breaks = NULL)\n\n```\n\n```{r analysis6, include=TRUE}\nlibrary(dplyr)\nlibrary(boot)\nlibrary(ggplot2)\n# Bootstrap 95% CI for mean\n# function to obtain mean from the data (with indexing)\nmean.fun <- function(D, d) {\n  return( mean(D[d]) )\n}\n# CI plot\n# Example of usage: ciplot(\"myDependentVariable\",\"myIndependentVariable\") \nciplot <- function(xVar, yVar) {\n  \n  groups <- group_by_(data, xVar)\n  \n  # Note: So far it is the only way found to enable variable name as string parameter for the function\n  groupedData <- eval(parse(text=sprintf(\"summarize(groups, \n                                         mean=mean(%s),\n                                         UCI=boot.ci(boot(%s, statistic = mean.fun, R=1000, sim=\\\"ordinary\\\"))$bca[,5],\n                                         LCI=boot.ci(boot(%s, statistic = mean.fun, R=1000, sim=\\\"ordinary\\\"))$bca[,4])\",\n                                         yVar, yVar, yVar)))\n  \n  # Note: Another way to compute bootstrap CIs (boot library is used here instead), is to compute it mannually.\n  # By adding mutate(se=sd/sqrt(n),lower=resp+qnorm(0.025)*se,upper=resp+qnorm(0.975)*se)\n  df <- data.frame(\n    trt = factor(groupedData[[1]]),\n    resp = groupedData[[\"mean\"]],\n    group = factor(groupedData[[1]]),\n    upper = c(groupedData[[\"UCI\"]]),\n    lower = c(groupedData[[\"LCI\"]])\n  )\n \n  # Plot CI\n  p <- ggplot(df, aes(trt, resp))\n  p <- p + theme(axis.title=element_text(size=20), axis.text=element_text(size=18))\n  p <- p + geom_pointrange(aes(ymin = lower, ymax = upper)) \n  p <- p + expand_limits(y = 0) \n  p <- p + ylab(yVar) \n  p <- p + xlab(\"\") \n  p <- p + geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) \n  #p <- p + coord_flip() #Can flip the coordinate here\n  p\n}\n```\n**Note** that the `echo = FALSE` parameter can be added to the code chunk to prevent printing of the R code that generates the plot.\n",
    "created" : 1475642265876.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2374739507",
    "id" : "28A45A65",
    "lastKnownWriteTime" : 1476314668,
    "last_content_update" : 1476314668569,
    "path" : "~/Desktop/MQP/analysis/results/MarkdownAnalysis/GeneratedMarkdown.Rmd",
    "project_path" : "GeneratedMarkdown.Rmd",
    "properties" : {
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}